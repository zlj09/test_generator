Setup
    This program requires Python 3.0 or higher version (tested under Python 3.7.0 32 bit). Please install Python 3 before running this program.
    This program also depends on several Python packages: sys, random, numpy and matplotlib. Among the packages, sys and random are required, while they belongs to THe Python Standard Library so they should be included in most of Python distributions. 
    Besides, numpy and matplotlib are optional. They are used to draw the test vector number vs. coverage curve. The program can still run without the two packages. Also, if you like, you can use Anaconda3 Python 3.7 version (https://www.anaconda.com/download/) to setup the environment.

Run
    The main program is fault_simulator.py. The usage of the program is shown as below. You can also check the usage by typing python fault_simulator.py --help.

    Usage 1:
    python fault_simulator.py (No parameter)
            Function: simulate the 4 given circuits: s27, s298f_2, s344f_2, s249f_2 using given test vectors, considering all stuck-at faults

    Usage 2:
    python fault_simulator.py -run NETLIST_FILE_PATH INPUT_FILE_PATH OUTPUT_FILE_PATH [FAULT_FILE_PATH]
            Function: simulate a circuit (defined in NETLIST_FILE) with a test vector provided in the INPUT_FILE, print the results to OUTPUT_FILE, considering the faults defined in FAULT_FILE (optional)
            Example 1: python fault_simulator.py -run circuits\s27.txt inputs\s27_input_3.txt outputs\s27_output_3.txt
            Example 2: python fault_simulator.py -run circuits\s27.txt inputs\s27_input_3.txt outputs\s27_output_3.txt faults\s27_fault_1.txt

    Usage 3:
    python fault_simulator.py -rand_run NETLIST_FILE_PATH TARGET_COVERAGE [FAULT_FILE_PATH]
            Function: apply random test vectors to a circuit (defined in NETLIST_FILE), count the number of vectors needed to achieve the TARGET_COVERAGE, considering the faults defined in FAULT_FILE (optional)
            Example 1: python fault_simulator.py -rand_run circuits\s27.txt 0.9
            Example 2: python fault_simulator.py -rand_run circuits\s27.txt 0.9 faults\s27_fault_1.txt


Output
    In -run mode, the program will print all the faults detected by the test vector and the total number of detected faults.
    In -rand_run mode, the program will print the coverages with increasing number of test vectors, and the total number of random vectors needed to achieve the target coverage.